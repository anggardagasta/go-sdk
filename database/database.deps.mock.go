// Code generated by MockGen. DO NOT EDIT.
// Source: database.deps.go

// Package database is a generated GoMock package.
package database

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// BeginTxx mocks base method.
func (m *MockDBInterface) BeginTxx(ctx context.Context, opts *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, opts)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MockDBInterfaceMockRecorder) BeginTxx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MockDBInterface)(nil).BeginTxx), ctx, opts)
}

// Beginx mocks base method.
func (m *MockDBInterface) Beginx() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Beginx")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Beginx indicates an expected call of Beginx.
func (mr *MockDBInterfaceMockRecorder) Beginx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Beginx", reflect.TypeOf((*MockDBInterface)(nil).Beginx))
}

// BindNamed mocks base method.
func (m *MockDBInterface) BindNamed(query string, arg interface{}) (string, []interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BindNamed", query, arg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BindNamed indicates an expected call of BindNamed.
func (mr *MockDBInterfaceMockRecorder) BindNamed(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindNamed", reflect.TypeOf((*MockDBInterface)(nil).BindNamed), query, arg)
}

// Connx mocks base method.
func (m *MockDBInterface) Connx(ctx context.Context) (*sqlx.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connx", ctx)
	ret0, _ := ret[0].(*sqlx.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connx indicates an expected call of Connx.
func (mr *MockDBInterfaceMockRecorder) Connx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connx", reflect.TypeOf((*MockDBInterface)(nil).Connx), ctx)
}

// DriverName mocks base method.
func (m *MockDBInterface) DriverName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DriverName")
	ret0, _ := ret[0].(string)
	return ret0
}

// DriverName indicates an expected call of DriverName.
func (mr *MockDBInterfaceMockRecorder) DriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DriverName", reflect.TypeOf((*MockDBInterface)(nil).DriverName))
}

// Get mocks base method.
func (m *MockDBInterface) Get(dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDBInterfaceMockRecorder) Get(dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBInterface)(nil).Get), varargs...)
}

// GetContext mocks base method.
func (m *MockDBInterface) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockDBInterfaceMockRecorder) GetContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockDBInterface)(nil).GetContext), varargs...)
}

// MapperFunc mocks base method.
func (m *MockDBInterface) MapperFunc(mf func(string) string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MapperFunc", mf)
}

// MapperFunc indicates an expected call of MapperFunc.
func (mr *MockDBInterfaceMockRecorder) MapperFunc(mf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapperFunc", reflect.TypeOf((*MockDBInterface)(nil).MapperFunc), mf)
}

// MustBegin mocks base method.
func (m *MockDBInterface) MustBegin() *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBegin")
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// MustBegin indicates an expected call of MustBegin.
func (mr *MockDBInterfaceMockRecorder) MustBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBegin", reflect.TypeOf((*MockDBInterface)(nil).MustBegin))
}

// MustBeginTx mocks base method.
func (m *MockDBInterface) MustBeginTx(ctx context.Context, opts *sql.TxOptions) *sqlx.Tx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustBeginTx", ctx, opts)
	ret0, _ := ret[0].(*sqlx.Tx)
	return ret0
}

// MustBeginTx indicates an expected call of MustBeginTx.
func (mr *MockDBInterfaceMockRecorder) MustBeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustBeginTx", reflect.TypeOf((*MockDBInterface)(nil).MustBeginTx), ctx, opts)
}

// MustExec mocks base method.
func (m *MockDBInterface) MustExec(query string, args ...interface{}) sql.Result {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustExec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	return ret0
}

// MustExec indicates an expected call of MustExec.
func (mr *MockDBInterfaceMockRecorder) MustExec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustExec", reflect.TypeOf((*MockDBInterface)(nil).MustExec), varargs...)
}

// MustExecContext mocks base method.
func (m *MockDBInterface) MustExecContext(ctx context.Context, query string, args ...interface{}) sql.Result {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MustExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	return ret0
}

// MustExecContext indicates an expected call of MustExecContext.
func (mr *MockDBInterfaceMockRecorder) MustExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustExecContext", reflect.TypeOf((*MockDBInterface)(nil).MustExecContext), varargs...)
}

// NamedExec mocks base method.
func (m *MockDBInterface) NamedExec(query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExec", query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExec indicates an expected call of NamedExec.
func (mr *MockDBInterfaceMockRecorder) NamedExec(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExec", reflect.TypeOf((*MockDBInterface)(nil).NamedExec), query, arg)
}

// NamedExecContext mocks base method.
func (m *MockDBInterface) NamedExecContext(ctx context.Context, query string, arg interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExecContext", ctx, query, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExecContext indicates an expected call of NamedExecContext.
func (mr *MockDBInterfaceMockRecorder) NamedExecContext(ctx, query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExecContext", reflect.TypeOf((*MockDBInterface)(nil).NamedExecContext), ctx, query, arg)
}

// NamedQuery mocks base method.
func (m *MockDBInterface) NamedQuery(query string, arg interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQuery", query, arg)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery.
func (mr *MockDBInterfaceMockRecorder) NamedQuery(query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockDBInterface)(nil).NamedQuery), query, arg)
}

// NamedQueryContext mocks base method.
func (m *MockDBInterface) NamedQueryContext(ctx context.Context, query string, arg interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQueryContext", ctx, query, arg)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQueryContext indicates an expected call of NamedQueryContext.
func (mr *MockDBInterfaceMockRecorder) NamedQueryContext(ctx, query, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQueryContext", reflect.TypeOf((*MockDBInterface)(nil).NamedQueryContext), ctx, query, arg)
}

// PrepareNamed mocks base method.
func (m *MockDBInterface) PrepareNamed(query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamed", query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamed indicates an expected call of PrepareNamed.
func (mr *MockDBInterfaceMockRecorder) PrepareNamed(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamed", reflect.TypeOf((*MockDBInterface)(nil).PrepareNamed), query)
}

// PrepareNamedContext mocks base method.
func (m *MockDBInterface) PrepareNamedContext(ctx context.Context, query string) (*sqlx.NamedStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareNamedContext", ctx, query)
	ret0, _ := ret[0].(*sqlx.NamedStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareNamedContext indicates an expected call of PrepareNamedContext.
func (mr *MockDBInterfaceMockRecorder) PrepareNamedContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareNamedContext", reflect.TypeOf((*MockDBInterface)(nil).PrepareNamedContext), ctx, query)
}

// Preparex mocks base method.
func (m *MockDBInterface) Preparex(query string) (*sqlx.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Preparex", query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Preparex indicates an expected call of Preparex.
func (mr *MockDBInterfaceMockRecorder) Preparex(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preparex", reflect.TypeOf((*MockDBInterface)(nil).Preparex), query)
}

// PreparexContext mocks base method.
func (m *MockDBInterface) PreparexContext(ctx context.Context, query string) (*sqlx.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreparexContext", ctx, query)
	ret0, _ := ret[0].(*sqlx.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreparexContext indicates an expected call of PreparexContext.
func (mr *MockDBInterfaceMockRecorder) PreparexContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreparexContext", reflect.TypeOf((*MockDBInterface)(nil).PreparexContext), ctx, query)
}

// QueryRowx mocks base method.
func (m *MockDBInterface) QueryRowx(query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowx", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowx indicates an expected call of QueryRowx.
func (mr *MockDBInterfaceMockRecorder) QueryRowx(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowx", reflect.TypeOf((*MockDBInterface)(nil).QueryRowx), varargs...)
}

// QueryRowxContext mocks base method.
func (m *MockDBInterface) QueryRowxContext(ctx context.Context, query string, args ...interface{}) *sqlx.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	return ret0
}

// QueryRowxContext indicates an expected call of QueryRowxContext.
func (mr *MockDBInterfaceMockRecorder) QueryRowxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowxContext", reflect.TypeOf((*MockDBInterface)(nil).QueryRowxContext), varargs...)
}

// Queryx mocks base method.
func (m *MockDBInterface) Queryx(query string, args ...interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Queryx", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Queryx indicates an expected call of Queryx.
func (mr *MockDBInterfaceMockRecorder) Queryx(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Queryx", reflect.TypeOf((*MockDBInterface)(nil).Queryx), varargs...)
}

// QueryxContext mocks base method.
func (m *MockDBInterface) QueryxContext(ctx context.Context, query string, args ...interface{}) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryxContext", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryxContext indicates an expected call of QueryxContext.
func (mr *MockDBInterfaceMockRecorder) QueryxContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryxContext", reflect.TypeOf((*MockDBInterface)(nil).QueryxContext), varargs...)
}

// Rebind mocks base method.
func (m *MockDBInterface) Rebind(query string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", query)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockDBInterfaceMockRecorder) Rebind(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockDBInterface)(nil).Rebind), query)
}

// Select mocks base method.
func (m *MockDBInterface) Select(dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockDBInterfaceMockRecorder) Select(dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDBInterface)(nil).Select), varargs...)
}

// SelectContext mocks base method.
func (m *MockDBInterface) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockDBInterfaceMockRecorder) SelectContext(ctx, dest, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*MockDBInterface)(nil).SelectContext), varargs...)
}

// Unsafe mocks base method.
func (m *MockDBInterface) Unsafe() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsafe")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// Unsafe indicates an expected call of Unsafe.
func (mr *MockDBInterfaceMockRecorder) Unsafe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsafe", reflect.TypeOf((*MockDBInterface)(nil).Unsafe))
}
